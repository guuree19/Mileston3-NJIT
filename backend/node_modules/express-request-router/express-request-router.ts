import * as express from 'express';
import * as request from 'request-promise-native';
import * as bodyParser from 'body-parser';

const router = express.Router();

interface RequestOptions {
	url: string,
	method?: string,
	headers?: object,
	redirect?: string,
	body?: string,
	proxy?: string
};

router.use(bodyParser.json());

router.post('/', async (req, res, next) => {
	let requestOptions: RequestOptions = req.body;
	let response;
	
	try {
		response = await request({
			url: requestOptions.url,
			method: requestOptions.method || 'get',
			headers: requestOptions.headers || {},
			body: requestOptions.body || '',
			followRedirect: requestOptions.redirect === 'follow',
			resolveWithFullResponse: true,
			proxy: requestOptions.proxy || null
		});
	}
	catch (error) {
		if (error.name === 'StatusCodeError') {
			res.status(error.statusCode);
			response = error.response;
		} else {
			throw error;
		}
	}
	finally {
		if ('headers' in response)
			for (let header in response.headers)
				res.setHeader(header, response.headers[header]);
			
		res.end(response.body);
	}
});

export default router;